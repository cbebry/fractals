//Triangle of triangles.function sierpinski(n) {    var angle = 60;    var steps = [1];    for(var i = 0;i < n - 1; i++) {       steps = DoRulesSierpinski(steps);    }	var length = steps.length;    for(var j = 0;j < length; j++) {	if(steps[j] > 0) {          ctx.rotate(-angle * deg);       } else {          ctx.rotate(angle * deg);       }	   ctx.lineTo(len, 0);	   ctx.translate(len, 0);    } } function DoRulesSierpinski(steps) {    var length = steps.length;    var newsteps = [];    for(var i = 0; i < length; i++) {       if((steps[i]) == 1) {          newsteps.push(2, - 1, - 2);       } else if(steps[i] == -1) {	   newsteps.push(-2, - 1, - 2);       } else if(steps[i] == 2) {          newsteps.push(1, 2, 1);       } else {	   newsteps.push(-1, 2, 1);       }    }return newsteps; } ///////////// //CODE BELOW IS F //OR CHRIS/ /////// /////////////  /*. //This funct ion is a utility  function for si erpinski. It per forms the L-syst em. //transforma tions. function  DoRules(steps){.  var length =  steps.length;v ar newsteps = [] ;    for(va r i = 0; i < len gth; i++){if( Math.abs(steps[i ]) == 1){.new steps.push(2,-1, -2);} else {. newsteps.p ush(1,2,1);}. }.   retur n newsteps; .  }. . .  //Tria ngle of triangle s //Defaults:  2,1,whatever,50.  function sierpi nski(n){.   va r steps = [2,-1, -2];    c.li neTo(len,0);   c.translate(len, 0);  c.rotate( -60*deg);  c.l ineTo(len,0);   c.translate(len ,0);  c.rotate (-60*deg);  c. lineTo(len,0);   c.translate(le n,0);    c.s troke();  step s = DoRules(step s);      . .    var lengt h = steps.length ;for(var i =  0; i < n; i++){. length = step s.length;.for (var j = 0; j <  length; j++){ if(steps[j ] > 0){ c.rotate(60*de g);}.else { c.rotate(- 60*deg);} .c.lineTo(len ,0);c.tran slate(len,0); c.stroke(); }.st eps = DoRules(st eps);}.   }. */